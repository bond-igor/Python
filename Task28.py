"""
Задание 4.
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса
(метод init()), который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
Примеры матриц: 3 на 2, 3 на 3, 2 на 4.

31 22
37 43
51 86

3 5 32
2 4 6
-1 64 -8

3 5 8 3
8 3 7 1

Следующий шаг — реализовать перегрузку метода str() для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода add() для реализации операции сложения двух
 объектов класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент
первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
"""
#Создание класса
class Matrix:
   # перегрузка конструктора
    def __init__(self, my_list):
        self.my_list = my_list

    # перегрузка метода для сложения матриц
    def __add__(self, other):
        res_matrix = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

        for i in range(len(self.my_list)):

            for j in range(len(other.my_list[i])):
                res_matrix[i][j] = self.my_list[i][j] + other.my_list[i][j]

        return res_matrix

   # перегрузка метода вывода, для вывода матрицы в привычном виде.
    def __str__(self):
        return str('\n'.join([' '.join([str(j) for j in i]) for i in self.my_list]))


#Клиентский код
matrix_1 = Matrix([[15, 1, 4], [6, 78, 3], [49, 74, 5]])
matrix_2 = Matrix([[5, 4, 78], [15, 97, 9], [4, 87, 48]])
res_matrix = Matrix(matrix_1 + matrix_2)
print(f"{matrix_1} \n + \n {matrix_2} \n = \n {res_matrix}")
